{"version":3,"sources":["../../src/pages/auto-complete/auto-complete.module.ts","../../src/pages/auto-complete/auto-complete.ts"],"names":[],"mappings":"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","file":"35.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { AutoCompletePage } from './auto-complete';\n\n@NgModule({\n  declarations: [\n    AutoCompletePage,\n  ],\n  imports: [\n    IonicPageModule.forChild(AutoCompletePage),\n  ],\n})\nexport class AutoCompletePageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/auto-complete/auto-complete.module.ts","import { Component, NgZone } from '@angular/core';\nimport { ViewController, IonicPage, NavController, NavParams } from 'ionic-angular';\n\ndeclare var google: any;\n\n/**\n * Generated class for the AutoCompletePage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-auto-complete',\n  templateUrl: 'auto-complete.html',\n})\nexport class AutoCompletePage {\n\n  autocompleteItems;\n  autocomplete;\n\n  latitude: number = 0;\n  longitude: number = 0;\n  geo: any\n\n  service = new google.maps.places.AutocompleteService();\n\n  constructor (public viewCtrl: ViewController, private zone: NgZone) {\n    this.autocompleteItems = [];\n    this.autocomplete = {\n      query: ''\n    };\n  }\n\n  dismiss() {\n    this.viewCtrl.dismiss();\n  }\n\n  chooseItem(item: any) {\n    \n    this.geo = item;\n    this.geoCode(this.geo);//convert Address to lat and long\n  }\n\n  updateSearch() {\n    if (this.autocomplete.query == '') {\n      this.autocompleteItems = [];\n      return;\n    }\n    let me = this;\n    this.service.getPlacePredictions({ input: this.autocomplete.query, componentRestrictions: {country: 'SG'}, }, function (predictions, status) {\n      me.autocompleteItems = []; \n      me.zone.run(function () {\n        predictions.forEach(function (prediction) {\n          me.autocompleteItems.push(prediction.description);\n        });\n      });\n    });\n  }\n\n  //convert Address string to lat and long\n  geoCode(address:any) {\n    let geocoder = new google.maps.Geocoder();\n    geocoder.geocode({ 'address': address }, (results, status) => {\n    this.latitude = results[0].geometry.location.lat();\n    this.longitude = results[0].geometry.location.lng();\n    this.viewCtrl.dismiss({address: this.geo, latitude: this.latitude, longitude: this.longitude});\n    // alert(\"lat: \" + this.latitude + \", long: \" + this.longitude);\n    \n   });\n }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/auto-complete/auto-complete.ts"],"sourceRoot":""}